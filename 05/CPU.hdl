// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // -------------------
        // 命令のレコード
        // -------------------
        // C命令かつdビットコードの3番目のビットが1なら計算結果をMに書き込む
        // instrunction = [i xx a cccccc ddd jjj]
        // instruction[15] == i
        // instruction[3] == d（最初のdは計算結果をMに格納するかどうかを指定）
        And(a=instruction[3], b=instruction[15], out=writeM);

        // C命令かつdビットコードの2番目のビットが1なら計算結果をDレジスタに格納する
        And(a=instruction[4], b=instruction[15], out=writeD);

        // instruction[15]が0ならA命令
        Not(in=instruction[15], out=aInstruction);
        // A命令もしくはC命令のdビットコードの1番目のビットが1なら計算結果をAレジスタに格納する
        Or(a=instruction[5], b=aInstruction, out=writeA);

        // -------------------
        // Mux, Aレジスタ
        // -------------------
        // 制御ビットはAレジスタに渡すかどうか決めるものだからinstruction[15]
        Mux16(a=instruction, b=aluOut, sel=instruction[15], out=mux1Out);
        ARegister(in=mux1Out, load=writeA, out=aOut, out[0..14]=addressM);

        // -------------------
        // Mux, Dレジスタ, ALU
        // -------------------
        // 制御ビットはaビット（instruction[12]）。それによりALUがAレジスタかメモリ入力のどちらかが決まる
        Mux16(a=aOut, b=inM, sel=instruction[12], out=mux2Out);
        DRegister(in=aluOut, load=writeD, out=dOut);

        ALU(
            x=dOut,
            y=mux2Out,
            zx=instruction[11],
            nx=instruction[10],
            zy=instruction[9],
            ny=instruction[8],
            f=instruction[7],
            no=instruction[6],
            out=outM,
            out=aluOut,
            zr=zr,
            ng=ng);

        // -------------------
        // PC
        // -------------------
        PC(in=aOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

        // PCのloadビットは現在命令のjビット及びALUのステータスビットで決まる
        // ALUのスタータスビットを求める

        Not (in=zr, out=notzr);
        Not (in=ng, out=notng);
        // if (instruction[2] == j1) == 1 && out < 0 then jump
        And (a=instruction[2], b=ng, out=j1jump);
        // if (instruction[1] == j2) == 1 && out == 0 then jump
        And (a=instruction[1], b=zr, out=j2jump);
        // if (instruction[0] == j3) == 1 && out > 0 then jump
        And(a=notng, b=notzr, out=greaterzero);
        And (a=instruction[0], b=greaterzero, out=j3jump);
        Or (a=j1jump, b=j2jump, out=j12jump);
        Or (a=j12jump, b=j3jump, out=jump);
        And (a=instruction[15], b=jump, out=loadPC);
}
